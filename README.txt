OTUS. DZ9. Распределенные транзакции

Реализованы следующие сервисы:

1) book - каталог книг, доступных для продажи (содержит подробную информацию о книгах, в том числе актуальную цену)
2) user - управляет профилями пользователей, в том числе содержит инфомрацию о балансе денежных средств пользователя
3) store - склад, который ведет учет доступного количества книг
4) payment - сервис оплаты, проверяет доступный баланс пользователя и имитирует списание средств, уменьшая баланс
5) delivery - сервис доставки, проверяет, находится ли адрес в зоне доставки, а также есть ли доступные курьеры на указанную дату
5) order - сервис заказов (основной сервис), принимает заказ от пользователя, в заказе может быть один вид книги в любом количестве


Для управления распределенными транзакциями реализован паттерн оркестрационная Сага в сервисе order.

Алгоритм работы:

1. Пользователь создает заказ
2. Сервис order создает заказ со статусом pending и возвращает параметры созданного заказа пользователю
3. Сервис order запускат оркестрационную сагу, которая для простоты реализована по синхронной модели (все участвующие в саге сервисы вызываются синхронно через REST API) 
4. Сага - шаг 1: забронировать заказ на складе (сервис store), в случае успеха на складе уменьшается счетчик доступных книг. Возможные ответы от сервиса store: success - успешно; failed - какая-то ошибка, детали в поле reason. 
4.1 Если failed - следующие шаги саги не выполняются, статус заказа обновляется в значение failed с указанием причины в поле reason.
4.2 Если success - переход на следующий шаг саги
5. Сага - шаг 2: отправка запроса в сервис payment для оплаты заказа. В свою очередь сервис payment запрашивает баланс пользователя из сервиса user и если денег достаточно, выполняется оплата, баланс пользователя уменьшается. Возможные ответы от сервиса payment: success, если списание денег прошло успешно, либо failed если кака-либо ошибка
5.1 Если failed - следующие шаги саги не выполняется, выполняется компенсация первого шага - отмена брони книги на складе (счетчик доступных книг увеличивается на количество из неуспешного заказа), транзакция в сервисе store переводится в статус canceled, в поле reason помещается причина (Payment failed), статус заказа выставляется в failed, в поле reason помещается причина (Not enough money)
5.2 Если success - переход на следующий шаг саги
6. Сага - шаг 3: оформить доставку через запрос в сервис delivery. Возможные ответы: success - доставка по указанному адресу в указанный день подтверждена, failed - доставка по указанным параметрам невозможна.
6.1 Если failed - отмена шага 2 (в сервисе payment с восстановлением баланса пользователя, статус транзакции canceled) и шага 1 (с восстановлением счетчика доступных книг на складе, статус транзакции canceled), статус заказа переводится в значение failed, в поле reason указывается причина (No couriers available for this date). Сага завершается.
6.2 Если success - заказ переводится в статус success, сага завершается.

В тестах postman отрабатываются 4 сценария:
1. Успешный заказ
2. Ошибка склада
3. Ошибка оплаты
4. Ошибка доставки



